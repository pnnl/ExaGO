
# CI constraints for every branch
workflow:
  rules:
      # Only run if source is an open merge request or a branch push
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

.ornl_script_template: &ornl_script_definition
  script:
    - |
      # Do _not_ clean up WORKDIR as files are needed for testing
      set -xv
      mkdir -p "$WORKDIR"
      cp -R ./* "$WORKDIR"
      cd "$WORKDIR"
      export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      MY_CLUSTER=ascent ./buildsystem/build.sh --build-only --job=gcc-cuda || exit 1

.ornl_test_script_template: &ornl_test_script_definition
  script:
    - |
      set -xv
      cd "$WORKDIR"
      export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      MY_CLUSTER="ascent" ./buildsystem/build.sh --test-only --job=gcc-cuda
      res=$?
      exit $res
  after_script:
    - |
      cd "$WORKDIR/.."
      rm -rf "$WORKDIR"

.ornl_environment_template: &ornl_environment_variables
  variables:
    SCHEDULER_PARAMETERS: "-P CSC359 -nnodes 1 -W 30"
    WORKDIR: /gpfs/wolf/proj-shared/csc359/ci/${CI_PIPELINE_ID}

.pnnl_after_script_template: &pnnl_after_script_definition
  after_script:
    - |
      export WORKDIR="$HOME/gitlab/${CI_PIPELINE_ID}/${MY_CLUSTER}/"
      # Iterate over possible jobid named files (jobid_%J)
      job_ids="$WORKDIR/jobid_*"
      for job in $job_ids
      do
        if [[ -f "$job" ]]; then
          jobid=$(cat "$job")
          scancel $jobid
        fi
      done
      rm -rf $WORKDIR

.pnnl_script_template: &pnnl_script_definition
  script:
    - |
      set -xv
      #
      #  NOTES:  WORKDIR is on constance/marianas/newell
      #          ./      is only on the Kubernetes instance
      #
      export WORKDIR="$HOME/gitlab/${CI_PIPELINE_ID}/${WORKDIR_SUFFIX}/"
      if [[ ! -d "$WORKDIR" ]]; then
        # if workdir already exists, we're in the testing job
        mkdir -p "$WORKDIR"
        cp -R ./* "$WORKDIR"
        cp ./.cmake-format.py "$WORKDIR"
      fi

      if [[ $MY_CLUSTER = "marianas" ]]; then
        export SLURM_Q=`perl ./buildsystem/pnnl/findIdleDLNodes.pl`
      else
        export SLURM_Q=`perl ./buildsystem/pnnl/findIdleNewellNodes.pl`
      fi

      cd "$WORKDIR"
      # Unique output file for this stage
      output="output_${OUTPUT_SUFFIX}"
      [ -f $output ] && rm $output
      touch $output
      tail -f $output &
      tailpid=$!

      # Set some directories used in the build script manually, as they
      # can be inconsistent in gitlab pipelines
      export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install

      # Export CTESTARGS defined in variables to run correct tests for stage
      export CTESTARGS=$CTESTARGS

      # jobid used in pnnl_after_script_template to cancel job if cancelled or
      # timed out by gitlab through the UI
      jobid=$(sbatch --export=ALL -A EXASGD --gres=gpu:1 --ntasks=3 -p $SLURM_Q -o $output -e $output -t 1:00:00 $WORKDIR/buildsystem/build.sh $SCRIPT_ARGS)
      export jobid=$(echo $jobid | cut -f4 -d' ')
      # Unique jobid filename for this job
      echo $jobid > "$WORKDIR/jobid_${jobid}"
      res=1
      while :;
      do
        if [[ "$(awk 'BEGIN{i=0}/BUILD_STATUS/{i++}END{print i}' $output)" != "0" ]]; then
          kill $tailpid
          echo 'Last tail of build output:'
          tail -n 50 $output
          res=$(grep BUILD_STATUS $output | tail -n 1 | cut -f2 -d':')
          break
        fi
        sleep 10
      done
      echo "Finished batch job with exit code: $res"
      rm "$WORKDIR/jobid_${jobid}"
      exit $res

.pnnl_tags_template: &pnnl_tags_definition
  tags:
    - k8s
    - ikp
    - exasgd
    - marianas

.pnnl-rules: &pnnl-rules
  rules:
    - &pnnl-rule
      if: '$CI_PROJECT_ROOT_NAMESPACE == "exasgd"' # Will only apply to PNNL

.pnnl-nonhpc-tags: &pnnl-nonhpc-definition
  tags:
    - k8s
    - ikp
    - exasgd
    - basic

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - spack-generate
  - spack-build

# Include PNNL GitLab stdlib
include:
  - remote: 'https://raw.githubusercontent.com/pnnl-miscscripts/gitlab-lib/v1/gitlab-lib.yaml'

.spack-variables: &spack-variables
  variables:
    SPACK_REF: 64a323b # develop
    SPACK_REPO: https://github.com/LLNL/spack.git
    S3_ENDPOINT_URL: http://cache.exasgd.pnl.gov

.spack-rules: &spack-rules
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_MESSAGE =~ /\[matrix\]/'
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - *pnnl-rule
    - when: manual

spack-generate-job:
  <<: *spack-variables
  <<: *spack-rules
  stage: spack-generate
  image: spack/ubuntu-bionic
  tags: [k8s, ikp, exasgd, basic]
  before_script:
    - git clone ${SPACK_REPO}
    - pushd spack && git checkout ${SPACK_REF} && popd
    - . "./spack/share/spack/setup-env.sh"
  script:
    - cp buildsystem/container/spack.yaml . && spack env activate --without-view .
    - spack -d ci generate
      --artifacts-root "${CI_PROJECT_DIR}/jobs_scratch_dir"
      --output-file "${CI_PROJECT_DIR}/jobs_scratch_dir/pipeline.yml"
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/jobs_scratch_dir"

spack-build-job:
  <<: *spack-rules
  <<: *spack-variables
  stage: spack-build
  trigger:
    include:
      - artifact: "jobs_scratch_dir/pipeline.yml"
        job: spack-generate-job
    strategy: depend
  needs:
    - artifacts: True
      job: spack-generate-job

