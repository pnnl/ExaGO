function [chgtab] =  create_ctgcfile(casename)%% define named indices into bus, gen, branch matrices[PQ, PV, REF, NONE, BUS_I, BUS_TYPE, PD, QD, GS, BS, BUS_AREA, VM, ...    VA, BASE_KV, ZONE, VMAX, VMIN, LAM_P, LAM_Q, MU_VMAX, MU_VMIN] = idx_bus;[F_BUS, T_BUS, BR_R, BR_X, BR_B, RATE_A, RATE_B, RATE_C, ...    TAP, SHIFT, BR_STATUS, PF, QF, PT, QT, MU_SF, MU_ST, ...    ANGMIN, ANGMAX, MU_ANGMIN, MU_ANGMAX] = idx_brch;[GEN_BUS, PG, QG, QMAX, QMIN, VG, MBASE, GEN_STATUS, PMAX, PMIN, ...    MU_PMAX, MU_PMIN, MU_QMAX, MU_QMIN, PC1, PC2, QC1MIN, QC1MAX, ...    QC2MIN, QC2MAX, RAMP_AGC, RAMP_10, RAMP_30, RAMP_Q, APF] = idx_gen;[CT_LABEL, CT_PROB, CT_TABLE, CT_TBUS, CT_TGEN, CT_TBRCH, ...    CT_TAREABUS, CT_TAREAGEN, CT_TAREABRCH, CT_ROW, CT_COL, CT_CHGTYPE, ...    CT_REP, CT_REL, CT_ADD, CT_NEWVAL, CT_TLOAD, CT_TAREALOAD, ...    CT_LOAD_ALL_PQ, CT_LOAD_FIX_PQ, CT_LOAD_DIS_PQ, CT_LOAD_ALL_P, ...    CT_LOAD_FIX_P, CT_LOAD_DIS_P, CT_TGENCOST, CT_TAREAGENCOST, ...    CT_MODCOST_F, CT_MODCOST_X] = idx_ct;%% Run power flowmpc = runpf(casename);%% Number of busesnb = length(mpc.bus(:,1));%% Number of linesnline = length(mpc.branch(:,1));%% Number of generatorsngen = length(mpc.gen(:,1));%% Labels for accessing additional columnsBR_ID      = MU_ANGMAX + 1;BR_KVLEVEL = MU_ANGMAX + 2;GEN_ID = APF + 1;%% Additional columns for   %% Lines --> Line ID (BR_ID) and Line Voltage Level (BR_KVLEVEL)  %% Gens  --> Gen. ID (GEN_ID)mpc.branch(:,MU_ANGMAX+(1:2)) = zeros(nline,2);mpc.gen(:,GEN_ID) = zeros(ngen,1);%% Set branch ids and voltage levels%% Identify EHV (> 300 KV), HV (< 300), and transformer branches%% f_bus & t_bus voltage level > 300 => line_type(i) = EHV%% f_bus & t_bus voltage level < 300 => line_type(i) = HV%% f_bus voltage level != t_bus voltage level => line is a transformer  %% If transformer, the KV of both the fbus and tbus are checked and the  %% KV level for the line is based on the highest voltage levelEHV = 1;HV = 2;%% Each branch starts with a line id = 1. In case of parallel lines, each line%% gets a consecutive integer starting with 1 for the first branch.for(i=1:nline)  ifbus = find(mpc.bus(:,BUS_I) == mpc.branch(i,F_BUS));  itbus = find(mpc.bus(:,BUS_I) == mpc.branch(i,T_BUS));    parlines = find(mpc.branch(:,F_BUS) == mpc.branch(i,F_BUS) & mpc.branch(:,T_BUS) == mpc.branch(i,T_BUS));  for(k=1:length(parlines))    if(mpc.branch(parlines(k),BR_ID) == 0)      mpc.branch(parlines(k),BR_ID) = k;    end    end        fbus_baseKV = mpc.bus(ifbus,BASE_KV);  tbus_baseKV = mpc.bus(itbus,BASE_KV);    if(fbus_baseKV == tbus_baseKV)    if(fbus_baseKV > 300.0)      mpc.branch(i,BR_KVLEVEL) = EHV;     else      mpc.branch(i,BR_KVLEVEL) = HV;    end  else    if(fbus_baseKV > 300.0 || tbus_baseKV > 300.0)      mpc.branch(i,BR_KVLEVEL) = EHV;    else      mpc.branch(i,BR_KVLEVEL) = HV;    end    end  end%% Add generator id to generator columns%% Generator ids start with 1. For multiple generators on the same bus, each%% generator gets a consecutive integer id with the first generator having an%% id = 1.for(i=1:ngen)  multgen = find(mpc.gen(:,GEN_BUS) == mpc.gen(i,GEN_BUS));  for(k = 1:length(multgen))    if(mpc.gen(multgen(k),GEN_ID) == 0)      mpc.gen(multgen(k),GEN_ID) = k;    end    endendif(strcmp(casename,'case_ACTIVSg200'))  %% The zone and area entries for the case_ACTIVSg200 need to be swapped as given in  %% the case description.  area_data = mpc.bus(:,BUS_AREA);  mpc.bus(:,ZONE) = mpc.bus(:,BUS_AREA);  mpc.bus(:,ZONE) = area_data;end%% EHV linesehv = find(mpc.branch(:,BR_KVLEVEL) == EHV);%% HV lineshv  = find(mpc.branch(:,BR_KVLEVEL) == HV);%% Number of EHV linesnehv = length(ehv);%% Number of HV linesnhv  = length(hv);%% Start populating contingencies%% Create contingency table%% This is in a format that is readable by MATPOWER. See APPLY_CHANGES.m for the%% format.%% Types of contingencies to include%% Set to 0 to exclude the contingencies%% N-1 EHVCT_TBRCH_EHV_N1 = 1;%% N-1 HVCT_TBRCH_HV_N1 = 2;%% N-1 GenCT_TGEN_N1 = 3;%% N-2 Multiple gen at the same busCT_TGEN_SAMEBUS_N2 = 0;%% N-2 line parallel linesCT_TBRCH_SAMEPATH_N2 = 0;%% N-2 EHV line + GeneratorCT_TBRCH_EHV_TGEN_N2 = 0;chgtab = [];ctgc_idx = 0;DEBUG = 0;DEBUG_TESTS = 10;outfilename = [casename,'_ctgc'];fd = fopen([outfilename,'.m'],'w');%% N-1 EHVif(CT_TBRCH_EHV_N1)  line_out_prob = 0.001;  if(nehv)    for(i = 1:(nehv - (nehv-DEBUG_TESTS)*DEBUG))      if(mpc.branch(ehv(i),BR_STATUS) == 1)        mpc.branch(ehv(i),BR_STATUS) = 0; % Set status to OFF        % Only consider fully connected graph        [groups,isolated] = find_islands(mpc);        if(length(groups) == 1 && isempty(isolated))          fprintf('N-1 EHV Line Contingency @ Line %d -- %d Id %d\n',mpc.branch(ehv(i),F_BUS),mpc.branch(ehv(i),T_BUS),mpc.branch(ehv(i),BR_ID));          ctgc_idx = ctgc_idx + 1;          ctgc_tag = 2;          fprintf(fd,'%6d,%6d,%6d,%6d,%6d,''%-2d'',%6d,%4.3f\n',ctgc_idx,ctgc_tag, 0,mpc.branch(ehv(i),F_BUS),mpc.branch(ehv(i),T_BUS),mpc.branch(ehv(i),BR_ID),0,line_out_prob);        end               mpc.branch(ehv(i),BR_STATUS) = 1;      end    end  endend%% N-1 HVif(CT_TBRCH_HV_N1)  if(nhv)    line_out_prob = 0.001;    for(i = 1:(nhv - (nhv-DEBUG_TESTS)*DEBUG))        if(mpc.branch(hv(i),BR_STATUS) == 1)          mpc.branch(hv(i),BR_STATUS) = 0; % Set status to OFF          % Only consider fully connected graph          [groups,isolated] = find_islands(mpc);          if(length(groups) == 1 && isempty(isolated))            fprintf('N-1 HV Line Contingency @ Line %d -- %d Id %d\n',mpc.branch(hv(i),F_BUS),mpc.branch(hv(i),T_BUS),mpc.branch(hv(i),BR_ID));            ctgc_idx = ctgc_idx + 1;            ctgc_tag = 2;            fprintf(fd,'%6d,%6d,%6d,%6d,%6d,''%-2d'',%6d,%4.3f\n',ctgc_idx,ctgc_tag, 0,mpc.branch(hv(i),F_BUS),mpc.branch(hv(i),T_BUS),mpc.branch(hv(i),BR_ID),0,line_out_prob);        %    ctgc = [ctgc_idx   line_out_prob  CT_TBRCH hv(i) BR_STATUS CT_REP  0 CT_TBRCH_HV_N1];        %    chgtab = [chgtab;ctgc];          end          mpc.branch(hv(i),BR_STATUS) = 1;        end     end   endend%% N-1 Genif(CT_TGEN_N1)  gen_out_prob = 0.001;  for(i = 1:ngen-(ngen-DEBUG_TESTS)*DEBUG)      if(mpc.gen(i,GEN_STATUS) == 1 && mpc.gen(i,PMAX) >= 20.0) % ON generators > 20 MW capacity        fprintf('N-1 Gen Contingency @ Bus %d Id = %d\n',mpc.gen(i,GEN_BUS),mpc.gen(i,GEN_ID));        ctgc_idx = ctgc_idx + 1;        ctgc_tag = 1;        fprintf(fd,'%6d,%6d,%6d,%6d,%6d,''%-2d'',%6d,%4.3f\n',ctgc_idx,ctgc_tag, mpc.gen(i,GEN_BUS),0,0,mpc.gen(i,GEN_ID),0,gen_out_prob);      end  endend%% N-2 Multiple gen at the same busif(CT_TGEN_SAMEBUS_N2)  gen_out_prob = 0.001;  mult_gen = find(mpc.gen(:,GEN_ID) > 1);  %% Buses with multiple generators  multgen_bus = unique(mpc.gen(mult_gen,GEN_BUS));  for(i = 1:length(multgen_bus))    %% indices of multiple generators at the same bus in the mpc.gen array    genidx = find(mpc.gen(:,GEN_BUS) == multgen_bus(i));    %% Exclude generators with off status    on_gen = find(mpc.gen(genidx,GEN_STATUS) == 1);    genidx = genidx(on_gen);    if(length(genidx) == 0)      continue;    elseif(length(genidx) == 1)      gencombs = genidx;      ncomb = 1;    else        %% Create combinations of genidx array      gencombs = nchoosek(genidx,2);      [ncomb,~] = size(gencombs);      for(k=1:ncomb)        %% Loop over combinations and set N-2 generator contingencies        fprintf('N-2 Gen Contingency @ Bus %d Id1 = %d Id2 = %d\n',mpc.gen(gencombs(k,1),GEN_BUS),mpc.gen(gencombs(k,1),GEN_ID),mpc.gen(gencombs(k,2),GEN_ID));        ctgc_idx = ctgc_idx + 1;        ctgc = [ctgc_idx   gen_out_prob  CT_TGEN gencombs(k,1) GEN_STATUS CT_REP  0 CT_TGEN_SAMEBUS_N2;                ctgc_idx   gen_out_prob  CT_TGEN gencombs(k,2) GEN_STATUS CT_REP  0 CT_TGEN_SAMEBUS_N2];                chgtab = [chgtab;ctgc];      end      end  endend%% N-2 line parallel linesif(CT_TBRCH_SAMEPATH_N2)  line_out_prob = 0.001;  parlines = find(mpc.branch(:,BR_ID) > 1);    line_ctr = 1;  lines_processed = [];  for(i = 1:length(parlines))    if(~isempty(lines_processed))      idx = find(lines_processed(:,1) == mpc.branch(parlines(i),F_BUS) & lines_processed(:,2) == mpc.branch(parlines(i),T_BUS));      if(~isempty(idx))        % Line already processed        continue;      end    end    parlines_i = find(mpc.branch(:,F_BUS) == mpc.branch(parlines(i),F_BUS) & mpc.branch(:,T_BUS) == mpc.branch(parlines(i),T_BUS));    lines_processed = [lines_processed;[mpc.branch(parlines(i),F_BUS),mpc.branch(parlines(i),T_BUS)]];    on_brch = find(mpc.branch(parlines_i,BR_STATUS) == 1);    parlines_i = parlines_i(on_brch);    if(length(parlines_i) == 0)      continue;    elseif(length(parlines_i) == 1)      linecombs = parlines_i;      ncomb = 1;    else      linecombs = nchoosek(parlines_i,2);      [ncomb,~] = size(linecombs);      for(k=1:ncomb)        %% Loop over combinations and set N-2 line contingencies        mpc.branch(linecombs(k,1),BR_STATUS) = 0;        mpc.branch(linecombs(k,2),BR_STATUS) = 0;        [groups,isolated] = find_islands(mpc);        if(length(groups) == 1 && isempty(isolated))          ctgc_idx = ctgc_idx + 1;          fprintf('N-2 Line Contingency @ Bus %d -- %d Id1 = %d Id2 = %d\n',mpc.branch(linecombs(k,1),F_BUS),...                             mpc.branch(linecombs(k,1),T_BUS), mpc.branch(linecombs(k,1),BR_ID),mpc.branch(linecombs(k,2),BR_ID));          ctgc = [ctgc_idx   line_out_prob  CT_TBRCH linecombs(k,1) BR_STATUS CT_REP  0 CT_TBRCH_SAMEPATH_N2;                  ctgc_idx   line_out_prob  CT_TBRCH linecombs(k,2) BR_STATUS CT_REP  0 CT_TBRCH_SAMEPATH_N2];                  chgtab = [chgtab;ctgc];        end        mpc.branch(linecombs(k,1),BR_STATUS) = 1;        mpc.branch(linecombs(k,2),BR_STATUS) = 1;      end      end  endend%% N-2 EHV line + Generatorif(CT_TBRCH_EHV_TGEN_N2)  %% List of N-1 EHV contingencies included in chgtab % ct_tbrch_ehv_n1 = find(chgtab(:,end) == CT_TBRCH_EHV_N1);  %% List of N-1 Gen contingencies included in chgtab % ct_tgen_n1 = find(chgtab(:,end) == CT_TGEN_N1); % nct_tgen_n1 = length(ct_tgen_n1); % for(i=1: length(ct_tbrch_ehv_n1)) %   ctgc = zeros(2*nct_tgen_n1,size(chgtab,2)); %   ctgc(1:2:2*nct_tgen_n1-1,1) = ctgc_idx+(1:nct_tgen_n1)'; %   ctgc(2:2:2*nct_tgen_n1,1)   = ctgc_idx+(1:nct_tgen_n1)'; %   ctgc(1:2:2*nct_tgen_n1-1,2:end-1) = repmat(chgtab(ct_tbrch_ehv_n1(i),2:end-1),nct_tgen_n1,1); %   ctgc(2:2:2*nct_tgen_n1,2:end-1)   = chgtab(ct_tgen_n1,2:end-1); %   ctgc(:,end) = CT_TBRCH_EHV_TGEN_N2; %   chgtab = [chgtab;ctgc]; %   ctgc_idx = ctgc_idx + nct_tgen_n1; % endend      fclose(fd);  
