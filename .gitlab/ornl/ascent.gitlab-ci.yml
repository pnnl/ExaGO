# https://stackoverflow.com/questions/67009007
# We have to use YAML anchors for rules here
# Rules are also evaluated sequentially, so you need to be careful about
# the order in which these rules are included in child jobs - list "never" rules before other rules
.rules-template:
  rules:
      # --
      # Rule to fall back on...
    - &default
      when: always
      # -- 
      # Only run when the commit **DOES NOT** contains "[newell-rebuild]"
    - &rule_no_newell_rebuild
      if: '$CI_COMMIT_TITLE =~ /\[newell-rebuild\]/'
      when: never
      # Only run when the commit **DOES NOT** contains "[deception-rebuild]"
    - &rule_no_deception_rebuild
      if: '$CI_COMMIT_TITLE =~ /\[deception-rebuild\]/'
      when: never
      # Only run when the commit **DOES NOT** contains "[incline-rebuild]"
    - &rule_no_incline_rebuild
      if: '$CI_COMMIT_TITLE =~ /\[incline-rebuild\]/'
      when: never
      # Only run when the commit **DOES NOT** contains "[ascent-rebuild]" 
    - &rule_no_ascent_rebuild
      if: '$CI_COMMIT_TITLE =~ /\[ascent-rebuild\]/'
      when: never 
      # Only run when the commit **DOES NOT** contains "[newell-test]"
    - &rule_no_newell_test
      if: '$CI_COMMIT_TITLE =~ /\[newell-test\]/'
      when: never
      # Only run when the commit **DOES** contains "[newell-test]"
    - &rule_yes_newell_test
      if: '$CI_COMMIT_TITLE =~ /\[newell-test\]/'
      when: always
    # Only run when the commit **DOES NOT** contains "[deception-test]"
    - &rule_no_deception_test
      if: '$CI_COMMIT_TITLE =~ /\[deception-test\]/'
      when: never
    # Only run when the commit **DOES** contains "[deception-test]"
    - &rule_yes_deception_test
      if: '$CI_COMMIT_TITLE =~ /\[deception-test\]/'
      when: always
    # Only run when the commit **DOES NOT** contains "[incline-test]"
    - &rule_no_incline_test
      if: '$CI_COMMIT_TITLE =~ /\[incline-test\]/'
      when: never
    # Only run when the commit **DOES** contains "[incline-test]"
    - &rule_yes_incline_test
      if: '$CI_COMMIT_TITLE =~ /\[incline-test\]/'
      when: always
    # Only run when the commit **DOES NOT** contains "[ascent-test]"
    - &rule_no_ascent_test
      if: '$CI_COMMIT_TITLE =~ /\[ascent-test\]/'
      when: never
    # Only run when the commit **DOES** contains "[ascent-test]"
    - &rule_yes_ascent_test
      if: '$CI_COMMIT_TITLE =~ /\[ascent-test\]/'
      when: always

# Ascent Variables
.ascent_environment_template:
  variables:
    SCHEDULER_PARAMETERS: "-P CSC359 -nnodes 1 -W 120"
    WORKDIR: /gpfs/wolf/proj-shared/csc359/ci/${CI_PIPELINE_ID}

.ascent_rules:
  rules:
    - *rule_no_deception_test
    - *rule_no_deception_rebuild
    - *rule_no_newell_test
    - *rule_no_newell_rebuild
    - *rule_no_incline_test
    - *rule_no_incline_rebuild
    - *rule_yes_ascent_test
    - *rule_no_ascent_rebuild
    - *default

.ascent_script_template:
  script:
    # Do _not_ clean up WORKDIR as files are needed for testing
    - set -xv
    - mkdir -p "$WORKDIR"
    - cp -r . "$WORKDIR"
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
    - MY_CLUSTER=ascent ./buildsystem/build.sh --build-only --job=gcc-cuda || exit 1

.ascent_test_script_template:
  script:
    - set -xv
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      # Export CTESTARGS defined in variables to run correct tests for stage
    - export CTESTARGS="$CTESTARGS"
    - MY_CLUSTER="ascent" ./buildsystem/build.sh --test-only --job=gcc-cuda
    - res=$?
    - exit $res
  # Only running after_script for 
  after_script:
    - cd "$WORKDIR/.."
    - rm -rf "$WORKDIR"

Ascent Build:
  needs: []
  stage: build
  tags:
    - nobatch
  extends:
    - .ascent_rules
    - .ascent_script_template
    - .ascent_environment_template

Ascent Test:
  stage: test
  needs: ['Ascent Build']
  tags:
    - batch
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
    CTESTARGS: "--output-on-failure"
  extends:
    - .ascent_rules
    - .ascent_test_script_template
    - .ascent_environment_template

# -- Spack Module Rebuilding

Ascent-Module-Init:
  needs: []
  extends: .ascent_environment_template
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  rules:
    - if: '$CI_COMMIT_TITLE =~ /\[ascent-rebuild\]/'
      when: always
  stage: build
  tags:
    - nobatch
  script:
    - set -xv
    - mkdir -p "$WORKDIR"
    - cp -r . "$WORKDIR"
    - cd "$WORKDIR"
    - MY_CLUSTER=ascent ./buildsystem/spack/binary_mirror.sh
    - res=$?
    - exit $res

Ascent-Module-Build:
  needs: ["Ascent-Module-Init"]
  rules:
    - if: '$CI_COMMIT_TITLE =~ /\[ascent-rebuild\]/'
      when: always
  extends: .ascent_environment_template
  stage: test
  tags:
    - batch
  script:
    - cd "$WORKDIR"
    - git checkout -b ${CI_COMMIT_REF_NAME}
    - ./buildsystem/spack/ascent/bsub.sh
    - git add ./buildsystem/spack/ascent/modules/*
    - git config user.name "spack-auto-module"
    - git config user.email "spack.bot@no-reply.com"
    - git commit -m "Update Ascent spack built tcl modules [ascent-test]"
    - git remote set-url origin https://gitlab-ci-token:${SPACK_GIT_TOKEN}@github.com/pnnl/ExaGO.git
    - git pull --rebase origin ${CI_COMMIT_REF_NAME}
    - git push origin ${CI_COMMIT_REF_NAME}
  after_script:
    - cd "$WORKDIR/.."
    - rm -rf "$WORKDIR"

# -- Reporting Ascent Status to PNNL GitHub
.report-job:
  when: always
  variables:
    MY_CLUSTER: Ascent
    GIT_STRATEGY: none
    STATUS_PROJECT: pnnl/ExaGO
    STATUS_NAME: ppc64le/gcc@11.2/cuda@11.8/v100@70
  tags:
    - nobatch
  extends: .ascent_environment_template
  environment:
    name: reporting-gitlab
  resource_group: status
  retry: 1

.report-status:
  extends: .report-job
  script:
    -  |
       curl -L \
       -X POST \
       -H @${GITHUB_CURL_HEADER}\
        https://api.github.com/repos/${STATUS_PROJECT}/statuses/${CI_COMMIT_SHA} \
        -d "{\"state\":\"${CI_JOB_NAME}\",\"target_url\":\"${CI_PIPELINE_URL}\",\"description\":\"${STATUS_NAME}\",\"context\":\"${MY_CLUSTER}\"}"
  environment:
    name: reporting-gitlab

.report-pending:
  extends: .report-job
  script:
   -  |
      set -x
      curl -L \
      -X POST \
      -H @${GITHUB_CURL_HEADER}\
       https://api.github.com/repos/${STATUS_PROJECT}/statuses/${CI_COMMIT_SHA} \
       -d "{\"state\":\"${CI_JOB_NAME}\",\"target_url\":\"${CI_PIPELINE_URL}\",\"context\":\"${MY_CLUSTER}\"}"

pending:
  extends: .report-pending
  stage: .pre

success:
  extends: .report-status
  stage: .post
       
failure:
  stage: .post
  extends: .report-status
  rules: 
    - when: on_failure
# ---
