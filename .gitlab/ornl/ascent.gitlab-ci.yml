# Ascent Variables
.ornl_environment_template:
  variables:
    SCHEDULER_PARAMETERS: "-P CSC359 -nnodes 1 -W 120"
    WORKDIR: /gpfs/wolf/proj-shared/csc359/ci/${CI_PIPELINE_ID}

.ornl_rules:
  rules:
    - if: $CI_PROJECT_PATH == "ecpcitest/exasgd/exago"

.ornl_script_template:
  script:
    # Do _not_ clean up WORKDIR as files are needed for testing
    - set -xv
    - mkdir -p "$WORKDIR"
    - cp -r . "$WORKDIR"
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
    - MY_CLUSTER=ascent ./buildsystem/build.sh --build-only --job=gcc-cuda || exit 1

.ornl_test_script_template:
  script:
    - set -xv
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      # Export CTESTARGS defined in variables to run correct tests for stage
    - export CTESTARGS="--output-on-failure -E Python"
    - MY_CLUSTER="ascent" ./buildsystem/build.sh --test-only --job=gcc-cuda
    - res=$?
    - exit $res
  # Only running after_script for 
  after_script:
    - cd "$WORKDIR/.."
    - rm -rf "$WORKDIR"

.ornl_python_test_script_template:
  script:
    - set -xv
    - cd "$WORKDIR"
    - export srcdir=$WORKDIR builddir=$WORKDIR/build installdir=$WORKDIR/install
      # Export CTESTARGS defined in variables to run correct tests for stage
    - export CTESTARGS="-VV -R Python"
    - MY_CLUSTER="ascent" ./buildsystem/build.sh --test-only --job=gcc-cuda
    - res=$?
    - exit $res
# ---

# For Ascent CI
Ascent Build:
  stage: build
  tags:
    - nobatch
  extends:
    - .ornl_rules
    - .ornl_script_template
    - .ornl_environment_template

Ascent Test:
  stage: test
  dependencies:
    - 'Ascent Build'
  tags:
    - batch
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
    CTESTARGS: "--output-on-failure -E Python"
  extends:
    - .ornl_rules
    - .ornl_test_script_template
    - .ornl_environment_template

Ascent Py Test:
  stage: test
  dependencies:
    - 'Ascent Build'
  tags:
    - batch 
  variables:
    # Don't clone for test jobs
    GIT_STRATEGY: none
  extends:
    - .ornl_rules
    - .ornl_python_test_script_template
    - .ornl_environment_template
  allow_failure: true
# ---

# Reporting Ascent Status to PNNL
.report-status:
  variables:
    GIT_STRATEGY: none
    STATUS_PROJECT: pnnl/ExaGO
  tags:
    - nobatch
  extends:
    - .ornl_rules
    - .ornl_environment_template
  script:
    # For complete details on the GitLab API please see:
    # https://docs.gitlab.com/ee/api/commits.html#post-the-build-status-to-a-commit
    # Make sure to create the token with Developer level access and API scope
    - curl -L \
      -X POST \
      -H @${GITHUB_CURL_HEADER}\
       https://api.github.com/repos/${STATUS_PROJECT}/statuses/${CI_COMMIT_SHA} \
       -d "{\"state\":\"${CI_JOB_NAME}\",\"target_url\":\"${CI_PIPELINE_URL}\",\"description\":\"ppcle/V100\",\"context\":\"${MY_CLUSTER}\"}"
  environment:
    name: reporting-gitlab

pending:
  variables:
    MY_CLUSTER: "Ascent"
  extends:
    - .report-pending
  stage: .pre

success:
  variables:
    MY_CLUSTER: "Ascent"
  extends:
    - .report-status
  stage: .post
       
failure:
  stage: .post
  variables:
    MY_CLUSTER: "Ascent"
  extends:
    - .report-status
  rules:
    - when: on_failure
# ---
