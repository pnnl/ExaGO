---
title: "DevOps for ExaScale - ExaSGD's journey"
author: "Cameron Rutherford"
title-slide-attributes:
  data-background-image: /images/techfest2023-background.png
  data-background-opacity: "0.6"
format:
  revealjs:
    theme: example.scss
    logo: /images/pnnl-logo.png
    footer: TechFest 2023
    scrollable: true
    smaller: true
    incremental: true
execute:
  enabled: false
jupyter: python3
---


# abstract

Software Engineering can be difficult enough in the simplest cases, even without attempting to deploy to the world’s largest supercomputers.
These large-scale computing platforms undergo rapid developments, deployments, and updates that add complexity to the management of large software stacks.
Within the ExaSGD software stack,DevOps best practices have been implemented in order to support a large, multi-lab project, as well as managing changing requirements throughout the development lifecycle.

In this talk, we will cover all the aspects of Software Engineering within ExaSGD: 

-GitLab & GitHub pipelines for Continuous Integration and Testing
-Dependency Management and deployment using Spack on various novel hardware architectures
-Linting and Tooling that aid in proliferation of development best practices for all developers
-Scaling and Profiling code at Exascale on various hardware backends
-Interfacing with various languages like C/C++, Python, and Javascript to aid in usability

## Spack & Dependency Management (Sayef)
- What is Spack
- Basic installation
- Package management
- Compiler Configuration
- Exago with Spack

# GitLab CI / CD & GitHub pipelines (Cameron GitHub)
# Linting / Tooling and DevOps tools (Jaya GitLab)
  - current linting (clang format, python format, file naming conventions, cmake format), run in CI pipelines for checking, can run manually to make in place changes
  - transition to precommit for linting 
# Scaling / Profiling and Running at 9k nodes (Sayef + Cameron)
# Language interoperability between C, Python and JS (Cameron + Jaya)
  - ExaGO's code base is based in C++
  - 
  The ExaGO Python bindings use an object-oriented API slightly different from the C++ API.
The C++ API uses the application type in uppercase as the prefix for its methods, where they are native methods in Python.
pybind11 + pytest

This year, we have introduced new Python bindings for ExaGO using pybind11 for the wrapper and pytest for the test suite. 
We have achieved coverage of the main OPFLOW functionality and use mpi4py to allow the Python module to interact with MPI.
The Spack package is aware of these bindings and will install the Python dependencies when the appropriate options are enabled.
To configure our testing for the Python bindings, we used pytest as a testing framework and then ran these tests within CMake. 
This way, the dozens of unit tests for each Python application supported only show up as one test in any ctest run. 
We test two ways - one with MPI initialized in Python and the other with MPI initialized through ExaGO’s initialization function.
These pipelines are run independently from the C++ tests in GitLab CI pipelines and allow the development of the more experimental Python wrapper to go along with core C++ work without interrupting the success of CI pipelines. 
added coverage of the SOPFLOW and SCOPFLOW applications in the Python wrapper, and so this testing infrastructure choice further supported parallel development.